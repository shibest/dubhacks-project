/** @import must precede all other statements */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  /**
   * Tailwind CSS theme
   * tailwind.config.ts expects the following color variables to be expressed as HSL values.
   * A different format will require also updating the theme in tailwind.config.ts.
  */
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 210 14% 11%;
    --foreground: 200 10% 85%;

    --card: 210 12% 16%;
    --card-foreground: 200 10% 90%;

    --popover: 210 12% 16%;
    --popover-foreground: 200 10% 90%;

    --primary: 260 80% 60%;
    --primary-foreground: 210 14% 11%;

    --secondary: 210 12% 22%;
    --secondary-foreground: 200 10% 85%;

    --muted: 210 10% 35%;
    --muted-foreground: 200 10% 65%;

    --accent: 260 80% 60%;
    --accent-foreground: 210 14% 11%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 210 10% 25%;
    --input: 210 12% 18%;
    --ring: 260 80% 60%;
    --sidebar-background: 210 14% 11%;
    --sidebar-foreground: 200 10% 85%;
    --sidebar-primary: 260 80% 60%;
    --sidebar-primary-foreground: 210 14% 11%;
    --sidebar-accent: 210 12% 22%;
    --sidebar-accent-foreground: 200 10% 85%;
    --sidebar-border: 210 10% 25%;
    --sidebar-ring: 260 80% 60%;
  }
}

@layer base {
  /* Basic box-sizing reset */
  *, *::before, *::after {
    box-sizing: border-box;
  }

  html {
    /* use Tailwind for colors via classes, but ensure base fills viewport */
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
  }

  html.dark {
    color-scheme: dark;
  }

  /* body/base typography and smoothing (merged from index.css) */
  :root {
    font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    font-weight: 400;
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body {
    /* Keep Tailwind variables for colors but ensure no default margins or padding */
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    margin: 0;
    min-width: 320px;
    min-height: 100vh;
    display: block;
  }

  /* Make the app root fill the viewport and avoid margin collapse pushing content down */
  html, body, #root {
    height: 100%;
    min-height: 100vh;
    width: 100%;
    min-width: 100vw;
    margin: 0;
    padding: 0;
  }

  /* root serves as the main app container; don't force all children to flex (that caused layout stretching)
     but keep it a column flex container so footers/headers can sit naturally. Overflow creates a new BFC to
     prevent child margins from collapsing out of the root and shifting the page. */
  #root {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    width: 100%;
    margin: 0;
    padding: 0;
    align-items: stretch;
    justify-content: flex-start;
    overflow: auto;
  }

  /* Prevent margin collapse where the first child's top margin pushes the whole page down */
  #root > :first-child {
    margin-top: 0 !important;
    padding-top: 0 !important;
  }

  :where(p, span, li, h1, h2, h3, h4, h5, h6, a, button, label, td, th) {
    overflow-wrap: anywhere;
    word-break: break-word;
  }

  pre,
  code {
    overflow-x: auto;
    white-space: pre;
  }

  /* Additional styles merged from src/index.css */
  a {
    font-weight: 500;
    color: #646cff;
    text-decoration: inherit;
  }
  a:hover {
    color: #535bf2;
  }

  button {
    border-radius: 8px;
    border: 1px solid transparent;
    padding: 0.6em 1.2em;
    font-size: 1em;
    font-weight: 500;
    font-family: inherit;
    background-color: #1a1a1a;
    cursor: pointer;
    transition: border-color 0.25s;
  }
  button:hover {
    border-color: #646cff;
  }
  button:focus,
  button:focus-visible {
    outline: 4px auto -webkit-focus-ring-color;
  }

  @media (prefers-color-scheme: light) {
    :root {
      color: #213547;
      background-color: #ffffff;
    }
    a:hover {
      color: #747bff;
    }
    button {
      background-color: #f9f9f9;
    }
  }
}

@layer components {
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse-glow {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }

  .fade-in {
    animation: fadeIn 0.5s ease-out;
  }

  .fade-out {
    animation: fadeOut 0.5s ease-out;
  }

  .slide-up {
    animation: slideUp 0.6s ease-out;
  }

  .pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }
}
